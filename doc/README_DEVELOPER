CcfConfig set of classes is used to load and save config files.

Parsed options are stored in QMap<QString, QPair<QString, bool> >, where first QString is the option name, the second QString (accessible through .first) stores value, and the bool specifies, whether the value was changed in-game (true if was, false by default).

Additional QList<QString> stores option names in ordered manner - this was file saving can be optimised.

// Terrain information
Application uses hipsometric map for terrain height. Value ("height") is calculated by ADDING int values (0-255) of red, green and blue components. This is then converted into meters by dividing by 10. This means, that the maximum height available in gam is 76.5 meters. Should that not be enough, a different algorithm can easily be added.

Props on the map should have 2 properties set: "objectName" and "cover". If you use Prop.qml or PropRectangle.qml as base object, both are already set to default values for you (but it's a good idea to change them so that they reflect identity of the prop in question).

Player sides:
For now, player is considered to be on "neutral" side. All others are considered to be other players. In the future, side choosing will be implemented.

Paths in QML.
All paths should return to root before progressing into source tree. For example, let's consider a file "qml/temp/MyFile.qml", that wants to access "img/newFolder/myFancyFile.png". Correct path to this file should be "../../img/newFolder/myFancyFile.png". This is pretty straight forward. But now, be also need to import "qml/temp/foo/Bar.qml". Correct path in CCF is "../../qml/temp/foo/", and NOT just "foo/".

Why?
This helps us maintain the code. It's easier to move files around this way. But, most importantly, that is what realtive2qrc script assumes and requires. So, by following that convention, we gain easy porting to mobile platforms, easier distribution on all platforms (by the means of QRC), and easy mod/ skin support.